
DESC VIEW Events_History
DESC TABLE RESTAURANT_DATA_MAPPING_TABLE;
SELECT * FROM ZOMATO_ETL.DBO.RESTAURANT_EVENTS C WHERE EVENT_ID = 104308;

SELECT * FROM EVENT_INACTIVE_CAPTURE 

UPDATE ZOMATO_ETL.DBO.RESTAURANT_EVENTS SET IS_ACITVE = FALSE,MODIFIED_BY = CURRENT_USER(),MODIFIED_DATE = GETDATE() WHERE EVENT_ID = 104308;

CREATE OR REPLACE VIEW Events_History
AS
(
    -- SELECT * FROM EVENT_INACTIVE_CAPTURE WHERE RESTAURANT_EVENT_ID = 2048;
    SELECT R.RESTAURANT_PK_ID,RDMT.RESTAURANT_AVERAGE_COST_FOR_TWO,RDMT.RESTAURANT_CUISINE_ID,RDMT.RESTAURANT_CURRENCY_ID,RDMT.RESTAURANT_LOCATION_ID,RDMT.HAS_ONLINE_DELIVERY,RDMT.HAS_TABLE_BOOKING,RDMT.RESTAURANT_RATING_ID,IFF(RDMT.RESTAURANT_EVENT_ID IS NULL,NULL,RE.RESTAURANT_EVENT_ID) RESTAURANT_EVENT_ID,EIC.IS_ACITVE,EIC.CREATED_BY,EIC.CREATED_DATE,EIC.MODIFIED_BY,EIC.MODIFIED_DATE,EIC.METADATA$ACTION ,EIC.METADATA$ISUPDATE
   FROM EVENT_INACTIVE_CAPTURE EIC 
    LEFT JOIN RESTAURANTS R
    ON R.RESTAURANT_PK_ID = EIC.RESTAURANT_ID
    LEFT JOIN RESTAURANT_EVENTS RE
    ON RE.EVENT_ID = EIC.EVENT_ID
    LEFT JOIN RESTAURANT_DATA_MAPPING_TABLE RDMT
    ON R.RESTAURANT_PK_ID = RDMT.RESTAURANT_ID
    AND COALESCE(RE.RESTAURANT_EVENT_ID,0) = COALESCE(RDMT.RESTAURANT_EVENT_ID,0)
    -- WHERE  METADATA$ISUPDATE != FALSE
); 

SELECT * FROM EVENTS_HISTORY;

CREATE OR REPLACE PROCEDURE Event_Stream_Insert()
RETURNS STRING NULL
LANGUAGE SQL
AS
$$
BEGIN
    -- Step 1: Create a Temporary Table
    CREATE OR REPLACE TEMPORARY TABLE TEMP AS
        (SELECT * FROM EVENTS_HISTORY);

    -- Step 2: Insert Data into the TEMP table
    INSERT INTO TEMP (RESTAURANT_PK_ID, RESTAURANT_AVERAGE_COST_FOR_TWO, RESTAURANT_CUISINE_ID, RESTAURANT_CURRENCY_ID, RESTAURANT_LOCATION_ID, 
                      HAS_ONLINE_DELIVERY, HAS_TABLE_BOOKING, RESTAURANT_RATING_ID, RESTAURANT_EVENT_ID, IS_ACITVE, CREATED_BY, CREATED_DATE, 
                      MODIFIED_BY, MODIFIED_DATE, METADATA$ACTION, METADATA$ISUPDATE)
    SELECT RESTAURANT_PK_ID, RESTAURANT_AVERAGE_COST_FOR_TWO, RESTAURANT_CUISINE_ID, RESTAURANT_CURRENCY_ID, RESTAURANT_LOCATION_ID, 
           HAS_ONLINE_DELIVERY, HAS_TABLE_BOOKING, RESTAURANT_RATING_ID, RESTAURANT_EVENT_ID, IS_ACITVE, CREATED_BY, CREATED_DATE, 
           MODIFIED_BY, MODIFIED_DATE, METADATA$ACTION, METADATA$ISUPDATE
    FROM EVENTS_HISTORY;

    -- Step 3: Merge and Update Based on Delete Actions
    MERGE INTO RESTAURANT_DATA_MAPPING_TABLE MT
    USING (SELECT DISTINCT RESTAURANT_PK_ID, RESTAURANT_EVENT_ID, IS_ACITVE 
           FROM TEMP 
           WHERE METADATA$ACTION = 'DELETE' AND IS_ACITVE = TRUE) VW
    ON VW.RESTAURANT_PK_ID = MT.RESTAURANT_ID
    AND VW.RESTAURANT_EVENT_ID = MT.RESTAURANT_EVENT_ID
    AND MT.IS_ACTIVE = TRUE 
    WHEN MATCHED THEN
        UPDATE SET MT.IS_ACTIVE = FALSE, 
                   MT.MODIFIED_BY = CURRENT_USER(), 
                   MT.MODIFIED_DATE = CURRENT_TIMESTAMP();

    --REACTIVATE THE INVALIDATED RECORDS IF WANTED.
    MERGE INTO RESTAURANT_DATA_MAPPING_TABLE MT
    USING (SELECT DISTINCT RESTAURANT_PK_ID, RESTAURANT_EVENT_ID 
           FROM TEMP 
           WHERE METADATA$ACTION = 'INSERT' AND IS_ACITVE = TRUE) VW
    ON VW.RESTAURANT_PK_ID = MT.RESTAURANT_ID
    AND VW.RESTAURANT_EVENT_ID = MT.RESTAURANT_EVENT_ID
    AND MT.IS_ACTIVE = FALSE
    WHEN MATCHED THEN
        UPDATE SET MT.IS_ACTIVE = TRUE, 
                   MT.MODIFIED_BY = CURRENT_USER(), 
                   MT.MODIFIED_DATE = CURRENT_TIMESTAMP();

    -- -- Step 4: Insert New Records Based on Events History
    -- INSERT INTO RESTAURANT_DATA_MAPPING_TABLE(RESTAURANT_ID, RESTAURANT_AVERAGE_COST_FOR_TWO, RESTAURANT_CUISINE_ID, RESTAURANT_CURRENCY_ID, 
    --                                           RESTAURANT_LOCATION_ID, HAS_ONLINE_DELIVERY, HAS_TABLE_BOOKING, RESTAURANT_RATING_ID, 
    --                                           RESTAURANT_EVENT_ID, IS_ACTIVE, CREATED_BY, CREATED_DATE)
    -- SELECT R.RESTAURANT_PK_ID, EH.RESTAURANT_AVERAGE_COST_FOR_TWO, EH.RESTAURANT_CUISINE_ID, EH.RESTAURANT_CURRENCY_ID, EH.RESTAURANT_LOCATION_ID, 
    --        EH.HAS_ONLINE_DELIVERY, EH.HAS_TABLE_BOOKING, EH.RESTAURANT_RATING_ID, NULL, TRUE, CURRENT_USER(), CURRENT_TIMESTAMP()
    -- FROM TEMP EH
    -- JOIN ZOMATO_ETL.DBO.RESTAURANTS R
    -- ON R.RESTAURANT_PK_ID = EH.RESTAURANT_PK_ID
    -- AND R.Is_Acitve = TRUE
    -- LEFT JOIN ZOMATO_ETL.DBO.RESTAURANT_DATA_MAPPING_TABLE RDMT
    -- ON RDMT.RESTAURANT_ID = R.RESTAURANT_PK_ID
    -- AND RDMT.RESTAURANT_CUISINE_ID = EH.RESTAURANT_CUISINE_ID
    -- AND RDMT.RESTAURANT_CURRENCY_ID = EH.RESTAURANT_CURRENCY_ID
    -- AND RDMT.RESTAURANT_LOCATION_ID = EH.RESTAURANT_LOCATION_ID
    -- AND RDMT.RESTAURANT_EVENT_ID = EH.RESTAURANT_EVENT_ID
    -- AND RDMT.IS_ACTIVE = TRUE
    -- WHERE RDMT.RESTAURANT_ID IS NULL AND METADATA$ACTION = 'DELETE' AND METADATA$ISUPDATE = TRUE AND EH.IS_ACITVE = TRUE;

    -- --Step 5 : INSERT If Event is INSERTED
    -- INSERT INTO RESTAURANT_DATA_MAPPING_TABLE(RESTAURANT_ID, RESTAURANT_AVERAGE_COST_FOR_TWO, RESTAURANT_CUISINE_ID, RESTAURANT_CURRENCY_ID, 
    --                                           RESTAURANT_LOCATION_ID, HAS_ONLINE_DELIVERY, HAS_TABLE_BOOKING, RESTAURANT_RATING_ID, 
    --                                           RESTAURANT_EVENT_ID, IS_ACTIVE, CREATED_BY, CREATED_DATE)
    -- SELECT R.RESTAURANT_PK_ID, EH.RESTAURANT_AVERAGE_COST_FOR_TWO, EH.RESTAURANT_CUISINE_ID, EH.RESTAURANT_CURRENCY_ID, EH.RESTAURANT_LOCATION_ID, 
    --        EH.HAS_ONLINE_DELIVERY, EH.HAS_TABLE_BOOKING, EH.RESTAURANT_RATING_ID, EH.RESTAURANT_EVENT_ID, TRUE, CURRENT_USER(), CURRENT_TIMESTAMP()
    -- FROM TEMP EH
    -- JOIN ZOMATO_ETL.DBO.RESTAURANTS R
    -- ON R.RESTAURANT_PK_ID = EH.RESTAURANT_PK_ID
    -- LEFT JOIN ZOMATO_ETL.DBO.RESTAURANT_DATA_MAPPING_TABLE RDMT
    -- ON RDMT.RESTAURANT_ID = R.RESTAURANT_PK_ID
    -- AND RDMT.RESTAURANT_CUISINE_ID = EH.RESTAURANT_CUISINE_ID
    -- AND RDMT.RESTAURANT_CURRENCY_ID = EH.RESTAURANT_CURRENCY_ID
    -- AND RDMT.RESTAURANT_LOCATION_ID = EH.RESTAURANT_LOCATION_ID
    -- AND RDMT.RESTAURANT_EVENT_ID = EH.RESTAURANT_EVENT_ID
    -- -- AND RDMT.IS_ACTIVE = FALSE
    -- WHERE RDMT.RESTAURANT_ID IS NULL;
    -- --METADATA$ACTION = 'INSERT' AND METADATA$ISUPDATE = TRUE AND EH.IS_ACITVE = TRUE;

  EXCEPTION
    WHEN OTHER THEN
        LET sql_code := sqlcode;
        LET sql_err := sqlerrm;
        LET sql_state := sqlstate;
        INSERT INTO ERROR_LOG(Error_Code,Error_Message,Error_State,Created_By,Created_Date)
            VALUES(:sql_code,:sql_err,:sql_state,CURRENT_USER(),CURRENT_TIMESTAMP());
        RAISE;
END;
$$;



CREATE OR REPLACE TASK Event_Update_Track WAREHOUSE = 'COMPUTE_WH' SCHEDULE = '1 minute'
AS
    CALL Event_Stream_Insert();

ALTER TASK Event_Update_Track SUSPEND;
SELECT * FROM EVENTS_HISTORY;
SELECT * FROM ERROR_LOG ORDER BY CREATED_DATE DESC;

SELECT * FROM RESTAURANT_DATA_MAPPING_TABLE where 
RESTAURANT_ID = 29896 ORDER BY RESTAURANT_EVENT_ID;
-- IS_ACTIVE = FALSE; 
RESTAURANT_EVENT_ID = 1915 
RESTAURANT_ID = 25740 IS_ACTIVE= FALSE RESTAURANT_ID = 24940 IS_ACTIVE = FALSE;
SELECT * FROM EVENT_INACTIVE_CAPTURE

DESC TABLE RESTAURANT_DATA_MAPPING_TABLE;

SELECT * FROM RESTAURANT_EVENTS WHERE RESTAURANT_ID = 26404
SELECT IFF(1=0,1,0)
SELECT convert_timezone('UTC','Asia/Kolkata',CURRENT_TIMESTAMP())

-- SELECT CURRENT_TIMESTAMP() AT TIME ZONE 'Asia/Kolkata';