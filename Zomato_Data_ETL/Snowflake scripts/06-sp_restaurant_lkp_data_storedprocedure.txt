
CREATE OR REPLACE PROCEDURE sp_restaurant_lkp_data()
RETURNS TABLE(Restaurant_Mapping_Transformed_Id INT,RESTAURANT_ID INT,RESTAURANT_AVERAGE_COST_FOR_TWO INT,RESTAURANT_CUISINE_ID INT,RESTAURANT_CURRENCY_ID INT,RESTAURANT_LOCATION_ID INT,HAS_ONLINE_DELIVERY BOOLEAN,HAS_TABLE_BOOKING BOOLEAN,RESTAURANT_RATING_ID INT,RESTAURANT_EVENT_ID INT,IS_ACTIVE BOOLEAN,CREATED_BY STRING,CREATED_DATE DATETIME)
LANGUAGE SQL
AS
$$
    DECLARE RES RESULTSET;
BEGIN
    CREATE OR REPLACE TEMPORARY TABLE Extract_Data(
            Temp_Id INT IDENTITY(1,1),
            Restaurant_Id_File INT,
            Restaurant_Id_Table INT,
            Restaurant_Name VARCHAR(255),
            Restaurant_Average_Cost_for_Two INT,
            Restaurant_Cuisine_Id INT ,
            Restaurant_Currency_Id INT,
            Restaurant_Location_Id INT,
            Has_Online_Delivery BOOLEAN,
            Has_Table_Booking BOOLEAN,
            Restaurant_Rating_Id INT,
            Event_Id INT,
            Restaurant_Event_Id INT,
            Restaurant_Cuisine VARCHAR(50),
            Restaurant_Currency VARCHAR(20)
            ,CITY VARCHAR(255)
            ,COUNTRY VARCHAR(255)
            ,ADDRESS VARCHAR(2000)
            ,LOCALITY VARCHAR(2000)
            ,ZIPCODE VARCHAR(50),
             LATTITUDE VARCHAR(100),
             LONGITUDE VARCHAR(100),
             IS_ACTIVE BOOLEAN,
            Created_By VARCHAR(50) DEFAULT CURRENT_USER(),
            Created_Date DATETIME DEFAULT current_timestamp()
    );

    INSERT INTO Extract_Data(
            Restaurant_Id_File
            ,RESTAURANT_NAME
            ,RESTAURANT_AVERAGE_COST_FOR_TWO
            ,RESTAURANT_CUISINE
            ,RESTAURANT_CURRENCY
            ,CITY
            ,COUNTRY
            ,ADDRESS
            ,LOCALITY
            ,ZIPCODE
            ,LATTITUDE,
             LONGITUDE
            ,HAS_ONLINE_DELIVERY
            ,HAS_TABLE_BOOKING
            ,IS_ACTIVE
            ,CREATED_BY
            ,CREATED_DATE
            ,EVENT_ID)
    SELECT
        RESTAURANT_ID
        ,RESTAURANT_NAME
        ,RESTAURANT_AVERAGE_COST_FOR_TWO
        ,RESTAURANT_CUISINE
        ,RESTAURANT_CURRENCY
        ,CITY
        ,COUNTRY
        ,ADDRESS
        ,LOCALITY
        ,ZIPCODE
        ,LATTITUDE,
        LONGITUDE
        ,HAS_ONLINE_DELIVERY
        ,HAS_TABLE_BOOKING
        ,TRUE
        ,CREATED_BY
        ,CREATED_DATE
        ,RESTAURANT_EVENT_ID

FROM(        
WITH CTE_NEWEVENTS(RESTAURANT_ID,RESTAURANT_NAME,RESTAURANT_AVERAGE_COST_FOR_TWO,RESTAURANT_CUISINE,RESTAURANT_CURRENCY,CITY,COUNTRY
        ,ADDRESS,LOCALITY,ZIPCODE,LATTITUDE,LONGITUDE,HAS_ONLINE_DELIVERY,HAS_TABLE_BOOKING,IS_ACTIVE,CREATED_BY,CREATED_DATE,RESTAURANT_EVENT_ID) AS(
    SELECT e.RESTAURANT_ID,E.RESTAURANT_NAME,E.RESTAURANT_AVERAGE_COST_FOR_TWO,E.RESTAURANT_CUISINE,E.RESTAURANT_CURRENCY,E.CITY,E.COUNTRY
    ,E.ADDRESS,E.LOCALITY,E.ZIPCODE,E.LATTITUDE,E.LONGITUDE,
    E.HAS_ONLINE_DELIVERY,E.HAS_TABLE_BOOKING,TRUE,E.CREATED_BY,E.CREATED_DATE,E.RESTAURANT_EVENT_ID
    FROM ZOMATO_ETL.STAGE.Restaurant_Data_Mapping_Table_Extract e
    LEFT JOIN ZOMATO_ETL.DBO.RESTAURANTS R
    ON R.RESTAURANT_ID = E.RESTAURANT_ID
    AND E.RESTAURANT_NAME = R.RESTAURANT_NAME
    LEFT JOIN DATE_DIM DS
    ON DS.DATE = DATE(E.EVENT_START_DATE)
    LEFT JOIN DATE_DIM DE
    ON DE.DATE = DATE(E.EVENT_END_DATE)
    LEFT JOIN ZOMATO_ETL.DBO.RESTAURANT_EVENTS RE
    ON RE.RESTAURANT_ID = R.RESTAURANT_PK_ID
    AND RE.EVENT_ID = E.RESTAURANT_EVENT_ID
    and re.event_title = E.EVENT_NAME
    AND RE.EVENT_START_DATE_ID = DS.DATE_ID
    AND RE.EVENT_END_DATE_ID = DE.DATE_ID
    WHERE  e.RESTAURANT_EVENT_ID is not null and re.event_id is null
    )
,CTE_NEWCUISINES AS(
    SELECT e.RESTAURANT_ID,E.RESTAURANT_NAME,E.RESTAURANT_AVERAGE_COST_FOR_TWO,E.RESTAURANT_CUISINE,E.RESTAURANT_CURRENCY,E.CITY,E.COUNTRY
    ,E.ADDRESS,E.LOCALITY,E.ZIPCODE,E.LATTITUDE,E.LONGITUDE,
    E.HAS_ONLINE_DELIVERY,E.HAS_TABLE_BOOKING,TRUE,E.CREATED_BY,E.CREATED_DATE,E.RESTAURANT_EVENT_ID
    FROM ZOMATO_ETL.STAGE.Restaurant_Data_Mapping_Table_Extract e
    JOIN ZOMATO_ETL.DBO.RESTAURANTS R
    ON R.RESTAURANT_ID = E.RESTAURANT_ID
    AND E.RESTAURANT_NAME = R.RESTAURANT_NAME
    JOIN ZOMATO_ETL.DBO.RESTAURANT_CUISINE RC
    ON RC.CUISINE =E.RESTAURANT_CUISINE
    LEFT JOIN DATE_DIM DS
    ON DS.DATE = DATE(E.EVENT_START_DATE)
    LEFT JOIN DATE_DIM DE
    ON DE.DATE = DATE(E.EVENT_END_DATE)
    LEFT JOIN ZOMATO_ETL.DBO.RESTAURANT_EVENTS RE
    ON RE.RESTAURANT_ID = R.RESTAURANT_PK_ID
    AND RE.EVENT_ID = E.RESTAURANT_EVENT_ID
    and re.event_title = E.EVENT_NAME
    AND RE.EVENT_START_DATE_ID = DS.DATE_ID
    AND RE.EVENT_END_DATE_ID = DE.DATE_ID
    LEFT JOIN ZOMATO_ETL.DBO.RESTAURANT_DATA_MAPPING_TABLE M
    ON M.RESTAURANT_ID = R.RESTAURANT_PK_ID
    AND M.RESTAURANT_CUISINE_ID = RC.RESTAURANT_CUISINE_ID
    AND COALESCE(M.RESTAURANT_EVENT_ID,-1) = COALESCE(RE.RESTAURANT_EVENT_ID,-1)
    WHERE M.Restaurant_Mapping_Id IS NULL
)
,CTE_NEWRESTAURANT AS(
    SELECT e.RESTAURANT_ID,E.RESTAURANT_NAME,E.RESTAURANT_AVERAGE_COST_FOR_TWO,E.RESTAURANT_CUISINE,E.RESTAURANT_CURRENCY,E.CITY,E.COUNTRY
    ,E.ADDRESS,E.LOCALITY,E.ZIPCODE,E.LATTITUDE,E.LONGITUDE,
    E.HAS_ONLINE_DELIVERY,E.HAS_TABLE_BOOKING,TRUE,E.CREATED_BY,E.CREATED_DATE,E.RESTAURANT_EVENT_ID
    FROM ZOMATO_ETL.STAGE.Restaurant_Data_Mapping_Table_Extract e
    LEFT JOIN ZOMATO_ETL.DBO.RESTAURANTS R
    ON R.RESTAURANT_ID = E.RESTAURANT_ID
    AND E.RESTAURANT_NAME = R.RESTAURANT_NAME
    WHERE R.RESTAURANT_ID IS NULL
)
    SELECT * FROM CTE_NEWEVENTS
    UNION
    SELECT * FROM CTE_NEWCUISINES
    UNION
    SELECT * FROM CTE_NEWRESTAURANT
    ORDER BY RESTAURANT_ID
) M;

    --UPDATE RESTAURANT_ID COLUMN
    MERGE INTO Extract_Data ed
    using ZOMATO_ETL.dbo.RESTAURANTS R
    ON ED.Restaurant_Id_File = R.RESTAURANT_ID
    AND R.Is_Acitve = True
    when matched then 
    update set ed.Restaurant_Id_Table = R.RESTAURANT_Pk_ID;
    
    --UPDATE RATING_ID COLUMN
    MERGE INTO Extract_Data ed
    using ZOMATO_ETL.dbo.User_Rating UR
    ON UR.Restaurant_Id = ED.RESTAURANT_ID_FILE
    AND UR.Is_Active = True
    when matched then 
    update set ed.Restaurant_Rating_Id = ur.Rating_Id;
    

    --UPDATE Restaurant_Currency_Id
    MERGE INTO Extract_Data ed
    using ZOMATO_ETL.dbo.Dim_Currency DC
    ON DC.Currency = ED.RESTAURANT_CURRENCY
    WHEN MATCHED THEN
    UPDATE SET ED.Restaurant_Currency_Id = DC.Currency_Id;

    --UPDATE Restaurant_Location_Id
    MERGE INTO Extract_Data ed
    USING (SELECT DISTINCT R.Restaurant_Pk_Id AS Restaurant_Id,RL.Restaurant_Location_Id FROM Extract_Data ed
    join ZOMATO_ETL.DBO.Restaurants R
    on R.Restaurant_Id = ed.Restaurant_Id_FILE
    AND R.Restaurant_Name = ed.Restaurant_Name
    AND R.Is_Acitve = TRUE
    join ZOMATO_ETL.dbo.City c
    on c.City = ed.City
    join ZOMATO_ETL.dbo.Country DC
    on dc.country_code = ed.country
    join ZOMATO_ETL.dbo.Geographic_Dim gd
    ON GD.Lattitude = CAST(ED.Lattitude as DECIMAL(28,10))
    AND GD.Longitude = CAST(ED.Longitude as DECIMAL(28,10))
    JOIN ZOMATO_ETL.dbo.Restaurant_Location RL
    ON RL.Restaurant_Id = R.Restaurant_Pk_Id
    AND RL.CITY_ID = C.CITY_ID
    AND RL.COUNTRY_ID = DC.COUNTRY_ID
    AND RL.GEO_DIM_ID = GD.Geo_Dim_Id
    AND RL.ADDRESS = ED.ADDRESS
    AND RL.LOCALITY = ED.LOCALITY
    AND RL.ZIPCODE = ED.ZIPCODE) RL
    ON RL.Restaurant_Id = ED.Restaurant_Id_TABLE
    WHEN MATCHED THEN 
    UPDATE SET ED.Restaurant_Location_Id = RL.Restaurant_Location_Id;

    --UPDATE Restaurant_Cuisine_Id
    MERGE INTO Extract_Data ed
    USING ZOMATO_ETL.DBO.Restaurant_Cuisine RC
    ON RC.Cuisine = ED.RESTAURANT_CUISINE
    WHEN MATCHED THEN
    UPDATE SET ED.Restaurant_Cuisine_Id = RC.Restaurant_Cuisine_Id;

    --UPDATE Restaurant_Event_Id
    MERGE INTO Extract_Data ed
    USING ZOMATO_ETL.DBO.Restaurant_Events RE
    ON ED.Event_Id = RE.EVENT_ID
    AND ED.RESTAURANT_ID_TABLE = RE.RESTAURANT_ID
    AND RE.IS_ACITVE = TRUE
    WHEN MATCHED THEN
    UPDATE SET ED.Restaurant_Event_Id = RE.Restaurant_Event_Id;

    insert into STAGE.Restaurant_Data_Mapping_Table_Transformed
(RESTAURANT_ID,RESTAURANT_AVERAGE_COST_FOR_TWO,RESTAURANT_CUISINE_ID,RESTAURANT_CURRENCY_ID,RESTAURANT_LOCATION_ID,HAS_ONLINE_DELIVERY,HAS_TABLE_BOOKING,RESTAURANT_RATING_ID,RESTAURANT_EVENT_ID,IS_ACTIVE,CREATED_BY,CREATED_DATE)
    SELECT RESTAURANT_ID_TABLE,RESTAURANT_AVERAGE_COST_FOR_TWO,RESTAURANT_CUISINE_ID,RESTAURANT_CURRENCY_ID,RESTAURANT_LOCATION_ID,HAS_ONLINE_DELIVERY,HAS_TABLE_BOOKING,RESTAURANT_RATING_ID,RESTAURANT_EVENT_ID,IS_ACTIVE,CREATED_BY,CREATED_DATE FROM Extract_Data;
    
    RES := (SELECT Restaurant_Mapping_Transformed_Id,RESTAURANT_ID,RESTAURANT_AVERAGE_COST_FOR_TWO,RESTAURANT_CUISINE_ID,RESTAURANT_CURRENCY_ID,RESTAURANT_LOCATION_ID,HAS_ONLINE_DELIVERY,HAS_TABLE_BOOKING,RESTAURANT_RATING_ID,RESTAURANT_EVENT_ID,IS_ACTIVE,CREATED_BY,CREATED_DATE FROM STAGE.Restaurant_Data_Mapping_Table_Transformed);
    RETURN TABLE(RES);

  EXCEPTION
    WHEN OTHER THEN
        LET sql_code := sqlcode;
        LET sql_err := sqlerrm;
        LET sql_state := sqlstate;
        INSERT INTO ERROR_LOG(Error_Code,Error_Message,Error_State,Created_By,Created_Date)
            VALUES(:sql_code,:sql_err,:sql_state,CURRENT_USER(),CURRENT_TIMESTAMP());    
END;
$$;

CALL sp_restaurant_lkp_data();
